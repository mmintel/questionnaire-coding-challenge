{"version":3,"sources":["components/elements/Button.tsx","components/elements/ScreenCenter.tsx","pages/HomePage.tsx","context/AppContext.ts","components/elements/Container.tsx","components/elements/Typography.tsx","components/elements/Input.tsx","components/questions/registry.ts","components/questions/MultipleChoiceQuestion.tsx","components/questions/SingleLineQuestion.tsx","components/Questionnaire.tsx","pages/QuestionDetailPage.tsx","pages/QuestionPage.tsx","components/Recommendation.tsx","components/AllRecommendations.tsx","pages/RecommendationPage.tsx","App.tsx","domain/questions/Question.ts","domain/questions/MultipleChoiceQuestion.ts","domain/questions/SingleLineQuestion.ts","fixtures/questions.ts","usecases/GetQuestionUseCase.ts","usecases/AnswerQuestionUseCase.ts","services/implementations/LocalStorageService.ts","repositories/implementations/InMemoryQuestionRepository.ts","usecases/AuthenticateUserUseCase.ts","repositories/implementations/HttpUserRepository.ts","services/HttpService.ts","services/implementations/FetchHttpService.ts","usecases/GetAllRecommendationsUseCase.ts","repositories/implementations/HttpRecommendationRepository.ts","usecases/GetStoredAnswersUseCase.ts","usecases/GetUserTokenUseCase.ts","index.tsx"],"names":["Button","className","props","clsx","ScreenCenter","children","HomePage","history","useHistory","onClick","push","AppContext","React","createContext","useApp","useContext","Container","Typography","Tag","tag","size","defaultProps","Input","registry","multipleChoice","value","question","onChange","handleChange","e","target","title","getChoices","map","item","name","id","checked","type","htmlFor","label","simple","fieldType","placeholder","Questionnaire","current","onNextQuestion","onFinalize","getQuestionUseCase","answerQuestionUseCase","getStoredAnswersUseCase","authenticateUserUseCase","execute","useState","answer","setAnswer","error","setError","useEffect","answerQuestion","message","handleGetRecommendation","a","data","address","email","firstName","numberOfChildren","Number","occupation","Component","getNext","disabled","QuestionDetailPage","params","useParams","navigateToRecommendation","QuestionPage","to","Recommendation","recommendation","labels","HEALTH_INSURANCE","HOME_CONTENT","PRIVATE_LIABILITY","MONTH","YEAR","price","amount","periodicity","AllRecommendations","getUserTokenUseCase","getAllRecommendationsUseCase","recommendations","setRecommendations","token","fetchData","RecommendationPage","App","exact","path","Question","next","this","MultipleChoiceQuestion","choices","choice","SingleLineQuestion","mandatory","length","Error","addChoice","setNext","questions","GetQuestionUseCase","repository","storage","findByID","first","load","console","warn","AnswerQuestionUseCase","save","LocalStorageService","key","loadAll","localStorage","setItem","JSON","stringify","getFromLocalStorage","raw","getItem","parse","InMemoryQuestionRepository","find","q","AuthenticateUserUseCase","authenticate","jwt","HttpUserRepository","httpService","user","post","HttpException","FetchHttpService","baseUrl","url","URL","href","options","fetch","getApiURL","method","headers","then","response","ok","json","body","GetAllRecommendationsUseCase","getAll","HttpRecommendationRepository","get","Authorization","GetStoredAnswersUseCase","GetUserTokenUseCase","questionStorageService","userStorageService","questionRepository","userRepository","recommendationRepository","forEach","add","ReactDOM","render","StrictMode","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.f2874334.chunk.js","sourcesContent":["import React from 'react';\nimport clsx from 'clsx';\n\ninterface ButtonProps extends React.DetailedHTMLProps<\n    React.ButtonHTMLAttributes<HTMLButtonElement>,\n    HTMLButtonElement\n> {}\n\nconst Button: React.FC<ButtonProps> = ({ className, ...props }) => (\n    <button className={clsx(\"bg-blue-700 py-2 px-4 text-white rounded-full hover:bg-blue-600 focus:outline-none\", className)} {...props}></button>\n)\n\nexport default Button;","import clsx from 'clsx';\nimport React from 'react';\n\ninterface ScreenCenterProps extends React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLDivElement>,\n    HTMLDivElement\n> {}\n\nconst ScreenCenter: React.FC<ScreenCenterProps> = ({ children, className, ...props }) => {\n    return (\n        <div className={clsx(\"w-screen h-screen flex items-center justify-center flex-col\", className)} {...props}>\n            {children}\n        </div>\n    )\n}\n\nexport default ScreenCenter;","import React from 'react';\nimport { useHistory } from 'react-router';\nimport Button from '../components/elements/Button';\nimport ScreenCenter from '../components/elements/ScreenCenter';\n\nconst HomePage = () => {\n    const history = useHistory();\n\n    const handleStart = () => {\n        history.push(`/question`)\n    }\n    \n    return (\n        <ScreenCenter>\n            <Button onClick={handleStart}>Start Questionnaire</Button>\n        </ScreenCenter>\n    )\n}\n\nexport default HomePage;","import React, { useContext } from 'react';\nimport { AnswerQuestionUseCase } from '../usecases/AnswerQuestionUseCase';\nimport { AuthenticateUserUseCase } from '../usecases/AuthenticateUserUseCase';\nimport { GetAllRecommendationsUseCase } from '../usecases/GetAllRecommendationsUseCase';\nimport { GetQuestionUseCase } from '../usecases/GetQuestionUseCase';\nimport { GetStoredAnswersUseCase } from '../usecases/GetStoredAnswersUseCase';\nimport { GetUserTokenUseCase } from '../usecases/GetUserTokenUseCase';\n\ninterface AppContextProps {\n    getQuestionUseCase: GetQuestionUseCase;\n    answerQuestionUseCase: AnswerQuestionUseCase;\n    authenticateUserUseCase: AuthenticateUserUseCase;\n    getAllRecommendationsUseCase: GetAllRecommendationsUseCase;\n    getStoredAnswersUseCase: GetStoredAnswersUseCase;\n    getUserTokenUseCase: GetUserTokenUseCase;\n}\n\nexport const AppContext = React.createContext<AppContextProps>({} as AppContextProps);\n\nexport const useApp = () => {\n    return useContext(AppContext);\n}","import clsx from 'clsx';\nimport React from 'react';\n\ninterface ContainerProps extends React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLDivElement>,\n    HTMLDivElement\n> {}\n\nconst Container: React.FC<ContainerProps> = ({ className, children, ...props }) => {\n    return (\n        <div className={clsx(\"w-full max-w-2xl mx-auto my-8 px-2\", className)} {...props}>\n            <div>\n                {children}\n            </div>\n        </div>\n    )\n}\n\nexport default Container;","import clsx from 'clsx';\nimport React from 'react';\n\ninterface TypographyProps extends React.HTMLAttributes<HTMLElement> {\n    size: number;\n    tag: 'span' | 'h1' | 'h2' | 'p';\n}\n\nconst Typography: React.FC<TypographyProps> = ({ tag: Tag, size, children, className, ...props }) => {\n    return (\n        <Tag className={clsx({\n            \"text-3xl\": size === 1,\n            \"text-xl\": size === 2,\n        }, className)} {...props}>\n            {children}\n        </Tag>\n    )\n}\n\nTypography.defaultProps = {\n    tag: 'span',\n}\n\nexport default Typography;","import clsx from 'clsx';\nimport React from 'react';\n\ninterface InputProps extends React.DetailedHTMLProps<\n    React.InputHTMLAttributes<HTMLInputElement>,\n    HTMLInputElement\n> {}\n\nconst Input: React.FC<InputProps> = ({ className, ...props }) => {\n    return (\n        <input className={clsx(\"border rounded p-2 w-full bg-white\", className)} {...props} />\n    )\n}\n\nexport default Input;","import MultipleChoiceQuestion from \"./MultipleChoiceQuestion\";\nimport SingleLineQuestion from \"./SingleLineQuestion\";\n\ninterface ComponentsRegistry {\n    [key: string]: React.ElementType;\n}\n\nexport const registry: ComponentsRegistry = {\n    multipleChoice: MultipleChoiceQuestion,\n    simple: SingleLineQuestion,\n}","import React from 'react';\nimport { MultipleChoiceQuestion as IMultipleChoiceQuestion } from '../../domain/questions/MultipleChoiceQuestion';\nimport { QuestionValue } from '../../domain/questions/Question';\nimport Typography from '../elements/Typography';\n\ninterface MultipleChoiceProps {\n    question: IMultipleChoiceQuestion;\n    value: QuestionValue;\n    onChange(value: string): void;\n}\n\nconst MultipleChoiceQuestion: React.FC<MultipleChoiceProps> = ({ value, question, onChange }) => {\n    const handleChange: React.ChangeEventHandler<HTMLInputElement> = (e) => {\n        onChange(e.target.value);\n    }\n\n    return (\n        <div>\n            <Typography tag=\"h1\" className=\"mb-4\" size={1}>{question.title}</Typography>\n            {question.getChoices().map(item => (\n                <div className=\"mb-1\" key={item.value}>\n                    <input name={question.id} id={item.value} value={item.value} checked={value === item.value} onChange={handleChange} type=\"radio\" />\n                    <label className=\"ml-2\" htmlFor={item.value}>{item.label}</label>\n                </div>\n            ))}\n        </div>\n    )\n}\n\nexport default MultipleChoiceQuestion;","import React from 'react';\nimport { QuestionValue } from '../../domain/questions/Question';\nimport { SingleLineQuestion as ISimpleQuestion } from '../../domain/questions/SingleLineQuestion';\nimport Input from '../elements/Input';\nimport Typography from '../elements/Typography';\ninterface SingleLineQuestionProps {\n    question: ISimpleQuestion;\n    value: QuestionValue;\n    onChange(value: string): void;\n}\n\nconst SingleLineQuestion: React.FC<SingleLineQuestionProps> = ({ question, value, onChange }) => {\n    const handleChange: React.ChangeEventHandler<HTMLInputElement> = (e) => {\n        onChange(e.target.value);\n    }\n\n    return (\n        <div>\n            <Typography tag=\"h1\" size={1}>{question.title}</Typography>\n            <Input type={question.fieldType} className=\"my-3\" value={value || ''} placeholder={question.placeholder} onChange={handleChange} />\n        </div>\n    )\n}\n\nexport default SingleLineQuestion;","import React, { useEffect, useState } from 'react';\nimport { useApp } from '../context/AppContext';\nimport { Question, QuestionValue } from '../domain/questions/Question';\nimport Button from './elements/Button';\nimport Container from './elements/Container';\nimport ScreenCenter from './elements/ScreenCenter';\nimport { registry } from './questions/registry';\n\ninterface QuestionnaireProps {\n    current?: string;\n    onNextQuestion(question: Question | null): void;\n    onFinalize(): void;\n}\n\nconst Questionnaire: React.FC<QuestionnaireProps> = ({ current, onNextQuestion, onFinalize }) => {\n    const { getQuestionUseCase, answerQuestionUseCase, getStoredAnswersUseCase, authenticateUserUseCase } = useApp();\n    const question = getQuestionUseCase.execute(current);\n    const [answer, setAnswer] = useState<QuestionValue>(null);\n    const [error, setError] = useState<string | null>(null);\n    \n    useEffect(() => {\n        // load current answer\n        setAnswer(question?.value || null);\n\n        // reset errors\n        setError(null);\n    }, [question]);\n\n    if (!question) {\n        return (<div>Could not find any question.</div>);\n    }\n\n    const answerQuestion = () => {\n        try {\n            answerQuestionUseCase.execute(question, answer);\n        } catch(e) {\n            setError(e.message);\n        }\n    }\n\n    const handleNext = () => {\n        answerQuestion();\n        onNextQuestion(question.getNext());\n    }\n\n    const handleChange = (value: QuestionValue) => {      \n        setAnswer(value)\n    }\n\n    const handleGetRecommendation = async () => {\n        answerQuestion();\n\n        try {\n            const data = getStoredAnswersUseCase.execute();\n            await authenticateUserUseCase.execute({\n                address: data.address,\n                email: data.email,\n                firstName: data.firstName,\n                numberOfChildren: data.numberOfChildren && Number(data.numberOfChildren),\n                occupation: data.occupation,\n            });\n            onFinalize();\n        } catch(e) {\n            setError(e.message);\n        }\n    }\n\n    const Component = registry[question.type];\n\n    if (!Component) {\n        return <div>There is no corresponding component for that type of question. Did you forget to register it?</div>\n    }\n    \n    return (\n        <ScreenCenter>\n            <Container>\n                <Component question={question} value={answer} onChange={handleChange} />\n\n                {error && (\n                    <div>{error}</div>\n                )}\n\n                <div className=\"mt-4\">\n                    {question.getNext() && (\n                        <Button onClick={handleNext} disabled={!answer}>Next</Button>\n                    )}\n\n                    {!question.getNext() && (\n                        <Button onClick={handleGetRecommendation} disabled={!answer}>Submit</Button>\n                    )}\n                </div>\n            </Container>\n        </ScreenCenter>\n    )\n}\n\nQuestionnaire.defaultProps = {\n    onNextQuestion: () => {},\n    onFinalize: () => {}\n}\n\nexport default Questionnaire;","import React from 'react';\nimport { useHistory, useParams } from 'react-router';\nimport Questionnaire from '../components/Questionnaire';\nimport { Question } from '../domain/questions/Question';\n\ninterface QuestionDetailPageParams {\n    id?: string;\n}\n\nconst QuestionDetailPage = () => {\n    const params = useParams<QuestionDetailPageParams>();\n    const history = useHistory();\n    const current = params.id;\n\n    const navigateToQuestion = (question: Question) => {\n        history.push(`/question/${question.id}`)\n    }\n\n    const navigateToRecommendation = async () => {\n        history.push('/recommendation');\n    }\n    \n    return (\n       <Questionnaire\n            current={current}\n            onNextQuestion={navigateToQuestion}\n            onFinalize={navigateToRecommendation}\n        />\n    )\n}\n\nexport default QuestionDetailPage;","import React from 'react';\nimport { Redirect } from 'react-router';\nimport { useApp } from '../context/AppContext';\n\nconst QuestionPage = () => {\n    const { getQuestionUseCase } = useApp();\n    const question = getQuestionUseCase.execute();\n    \n    return (\n       <Redirect to={`/question/${question.id}`} />\n    )\n}\n\nexport default QuestionPage;","import React from 'react';\nimport { Recommendation as IRecommendation } from '../domain/recommendations/Recommendation';\n\ninterface RecommendationProps {\n    recommendation: IRecommendation;\n}\n\nconst Recommendation: React.FC<RecommendationProps> = ({ recommendation }) => {\n    // TODO string formatting should be placed here\n    const labels = {\n        HEALTH_INSURANCE: 'Health insurance',\n        HOME_CONTENT: 'Home content',\n        PRIVATE_LIABILITY: 'Private liability',\n        MONTH: 'month',\n        YEAR: 'year',\n    }\n    return (\n        <div className=\"border p-4 mb-2 flex justify-between\">\n            <div>{labels[recommendation.type]}</div>\n            <div>€{recommendation.price.amount} per {labels[recommendation.price.periodicity]}</div>\n        </div>\n    )\n}\n\nexport default Recommendation;","import React, { useEffect, useState } from 'react';\nimport { useApp } from '../context/AppContext';\nimport { Recommendation as IRecommendation } from '../domain/recommendations/Recommendation';\nimport Container from './elements/Container';\nimport ScreenCenter from './elements/ScreenCenter';\nimport Typography from './elements/Typography';\nimport Recommendation from './Recommendation';\n\nconst AllRecommendations: React.FC = () => {\n    const { getUserTokenUseCase, getAllRecommendationsUseCase } = useApp();\n    const [error, setError] = useState<string | null>(null);\n    const [recommendations, setRecommendations] = useState<IRecommendation[] | null>(null);\n    const token = getUserTokenUseCase.execute();\n\n    useEffect(() => {\n        if (!token) {\n            setError('Not authenticated');\n            return;\n        }\n\n        const fetchData = async () => {\n            const recommendations = await getAllRecommendationsUseCase.execute(token);            \n            setRecommendations(recommendations);\n        };\n\n        fetchData();\n    }, [getAllRecommendationsUseCase, token])\n\n    return (\n        <ScreenCenter>\n            <Container>\n                <Typography className=\"mb-2\" tag=\"h1\" size={1}>We got your recommendation</Typography>\n                <Typography className=\"mb-4\" tag=\"h2\" size={2}>Based on your answers, this is what makes sense for you and what you should pay.</Typography>\n\n                {error && <div>{error}</div>}\n\n                {recommendations?.map(recommendation => (\n                    <Recommendation recommendation={recommendation} key={recommendation.type} />\n                ))}\n            </Container>\n        </ScreenCenter>\n    )\n}\n\nexport default AllRecommendations;","import React from 'react';\nimport AllRecommendations from '../components/AllRecommendations';\n\nconst RecommendationPage = () => {\n    return (\n        <AllRecommendations />\n    )\n}\n\nexport default RecommendationPage;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport HomePage from './pages/HomePage';\nimport QuestionDetailPage from './pages/QuestionDetailPage';\nimport QuestionPage from './pages/QuestionPage';\nimport RecommendationPage from './pages/RecommendationPage';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <HomePage />\n        </Route>\n        <Route exact path=\"/question\">\n          <QuestionPage />\n        </Route>\n        <Route path=\"/question/:id\">\n          <QuestionDetailPage />\n        </Route>\n        <Route path=\"/recommendation\">\n          <RecommendationPage />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","export type QuestionValue = string | number | null;\n\ntype NextFN = (value: QuestionValue) => Question;\n\nexport abstract class Question {\n    public value: QuestionValue = null;\n    public abstract type: string;\n    private next: Question | NextFN | null = null;\n\n    constructor(public id: string, public title: string) {}\n    \n    abstract answer(value: QuestionValue): void;\n\n    public getNext(): Question | null {\n        if (typeof this.next === \"function\") {\n            return this.next(this.value);\n        }\n\n        return this.next;\n    }\n\n    public setNext(next: Question | NextFN) {\n        this.next = next;\n    }\n}","import { Choice } from \"./Choice\";\nimport { Question } from \"./Question\";\n\nexport class MultipleChoiceQuestion extends Question {\n    private choices: Choice[] = [];\n    public type = 'multipleChoice';\n\n    getChoices() {\n        return this.choices;\n    }\n\n    addChoice(choice: Choice) {\n        this.choices.push(choice);\n    }\n\n    answer(value: string) {\n        this.value = value;\n    }\n}","import { Question } from \"./Question\";\n\ntype FieldType = 'text' | 'number' | 'email';\n\nexport class SingleLineQuestion extends Question {\n    public type = 'simple';\n    public placeholder = 'Type something...';\n    public mandatory = false;\n    public fieldType: FieldType = 'text';\n\n    answer(value: string) {\n        if (this.mandatory && !value?.length) throw new Error('This field is mandatory.');\n        this.value = value;\n    }\n}","import { MultipleChoiceQuestion } from \"../domain/questions/MultipleChoiceQuestion\";\nimport { SingleLineQuestion } from \"../domain/questions/SingleLineQuestion\";\n\nconst firstName = new SingleLineQuestion(\"firstName\", \"What's your first name?\");\nfirstName.mandatory = true;\nfirstName.placeholder = 'Jane';\n\nconst address = new SingleLineQuestion(\"address\", \"What's your address?\");\naddress.placeholder = 'Lohmühlenstraße 65';\n\nconst occupation = new MultipleChoiceQuestion(\"occupation\", \"What's your occupation?\");\noccupation.addChoice({ label: 'Employed', value: 'EMPLOYED' });\noccupation.addChoice({ label: 'Self-Employed', value: 'SELF_EMPLOYED' });\noccupation.addChoice({ label: 'Student', value: 'STUDENT' });\n\nconst children = new MultipleChoiceQuestion(\"children\", \"Do you have any children?\");\nchildren.addChoice({ label: 'Yes', value: 'yes' });\nchildren.addChoice({ label: 'No', value: 'no' });\n\nconst numberOfChildren = new SingleLineQuestion(\"numberOfChildren\", \"How many children do you have?\");\nnumberOfChildren.fieldType = 'number';\nnumberOfChildren.placeholder = \"2\";\nnumberOfChildren.mandatory = true;\n\nconst email = new SingleLineQuestion(\"email\", \"What's your email?\");\nemail.mandatory = true;\nemail.fieldType = 'email';\nemail.placeholder = \"jane.doe@feather-insurance.com\";\n\nfirstName.setNext(address);\naddress.setNext(occupation)\noccupation.setNext(children);\nchildren.setNext((value) => value === 'yes' ? numberOfChildren : email);\nnumberOfChildren.setNext(email);\n\nconst questions = [ firstName, address, occupation, children, numberOfChildren, email ];\n\nexport default questions;","import { Question } from \"../domain/questions/Question\";\nimport { QuestionRepository } from \"../repositories/QuestionRepository\";\nimport { StorageService } from '../services/StorageService';\n\nexport class GetQuestionUseCase {\n    constructor(private repository: QuestionRepository, private storage: StorageService) {}\n    \n    execute(id?: string): Question {\n        const question: Question | undefined = id ?  this.repository.findByID(id) : this.repository.first();\n\n        if (!question) {\n            throw new Error('Could not find question');\n        }\n\n        const answer = this.storage.load(question.id);\n        \n        // try to answer question with data from storage\n        if (answer) {\n            try {\n                question.answer(answer)\n            } catch {\n                console.warn('Something wrong with data loaded from localStorage, ignoring answer...');\n            }\n        }\n\n        return question;\n    }\n}","import { Question, QuestionValue } from \"../domain/questions/Question\";\nimport { QuestionRepository } from \"../repositories/QuestionRepository\";\nimport { StorageService } from '../services/StorageService';\n\nexport class AnswerQuestionUseCase {\n    constructor(private repository: QuestionRepository, private storage: StorageService) {}\n    \n    execute(question: Question, answer: QuestionValue) {\n        question.answer(answer);\n        this.storage.save(question.id, answer);\n    }\n}","import { StorageService, Json } from \"../StorageService\";\n\nexport class LocalStorageService implements StorageService {\n    constructor(private key: string) {}\n    \n    save(key: string, value: any) {\n        const data = this.loadAll();\n        data[key] = value;        \n        localStorage.setItem(this.key, JSON.stringify(data));\n    }\n\n    load(key: string) {\n        const data = this.loadAll();\n        return data[key];\n    }\n\n    loadAll() {\n        return this.getFromLocalStorage();\n    }\n    \n    private getFromLocalStorage(): Json {\n        const raw = localStorage.getItem(this.key);\n        return raw ? JSON.parse(raw) : {};\n    }\n}","import { Question } from \"../../domain/questions/Question\";\nimport { QuestionRepository } from \"../QuestionRepository\";\n\nexport class InMemoryQuestionRepository implements QuestionRepository {\n    private questions: Question[] = [];\n\n    add(question: Question) {\n        this.questions.push(question);\n    }\n\n    first() {\n        return this.questions[0];\n    }\n\n    findByID(id: string) {\n        return this.questions.find(q => q.id === id);\n    }\n}","import { User } from \"../domain/users/User\";\nimport { UserRepository } from \"../repositories/UserRepository\";\nimport { StorageService } from \"../services/StorageService\";\n\nexport class AuthenticateUserUseCase {\n    constructor(private repository: UserRepository, private storage: StorageService) {}\n    \n    async execute(data: User): Promise<void> {\n        const { jwt } = await this.repository.authenticate(data);\n        this.storage.save('token', jwt);\n    }\n}","import { User } from \"../../domain/users/User\";\nimport { HttpService } from \"../../services/HttpService\";\nimport { UserRepository, JWT } from \"../UserRepository\";\n\nexport class HttpUserRepository implements UserRepository {\n    constructor(private httpService: HttpService) {}\n\n    authenticate(user: User): Promise<JWT> {\n        return this.httpService.post('/user', user);\n    }\n}","export interface HttpService {\n    get<T = any>(url: string, options?: HttpOptions): Promise<T>;\n    post<T = any>(url: string, data?: {}, options?: HttpOptions): Promise<T>;\n}\n\nexport interface HttpOptions {\n    headers?: HttpHeaders;\n}\n\nexport interface HttpHeaders {\n    [header: string]: string;\n}\n\nexport class HttpException extends Error {}","import { HttpException, HttpOptions, HttpService } from \"../HttpService\";\n\nexport class FetchHttpService implements HttpService {\n    constructor(private baseUrl: string) {}\n\n    private getApiURL(url: string) {\n        return new URL(this.baseUrl + url).href;\n    }\n\n    get(url: string, options?: HttpOptions) {\n        return fetch(this.getApiURL(url), {\n            method: 'GET',\n            headers: options?.headers,\n        })\n            .then(response => {\n                if (!response.ok) {\n                    throw new HttpException(\"Retrieving data was not successful.\");\n                }\n                return response.json()\n            })\n    }\n\n    post(url: string, data?: {}, options?: HttpOptions) {\n        return fetch(this.getApiURL(url), {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                ...options?.headers,\n            },\n            body: JSON.stringify(data),\n        }).then(response => {\n            if (!response.ok) {\n                throw new HttpException(\"Sending data was not successful.\");\n            }\n            return response.json()\n        })\n    }\n}","import { Recommendation } from \"../domain/recommendations/Recommendation\";\nimport { RecommendationRepository } from \"../repositories/RecommendationRepository\";\n\nexport class GetAllRecommendationsUseCase {\n    constructor(private repository: RecommendationRepository) {}\n    \n    async execute(token: string): Promise<Recommendation[]> {\n        return this.repository.getAll(token);\n    }\n}","import { Recommendation } from \"../../domain/recommendations/Recommendation\";\nimport { HttpService } from \"../../services/HttpService\";\nimport { RecommendationRepository } from '../RecommendationRepository';\n\nexport class HttpRecommendationRepository implements RecommendationRepository {\n    constructor(private httpService: HttpService) {}\n\n    async getAll(token: string) {\n        return this.httpService.get<Recommendation[]>('/recommendation', {\n            headers: {\n                Authorization: `Bearer ${token}`,\n            }\n        })\n    }\n}","import { StorageService } from '../services/StorageService';\n\nexport class GetStoredAnswersUseCase {\n    constructor(private storage: StorageService) {}\n    \n    execute() {\n        return this.storage.loadAll();\n    }\n}","import { StorageService } from \"../services/StorageService\";\n\nexport class GetUserTokenUseCase {\n    constructor(private storage: StorageService) {}\n    \n    execute(): string | null {\n        return this.storage.load('token');\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { AppContext } from './context/AppContext';\nimport questions from './fixtures/questions';\nimport { GetQuestionUseCase } from './usecases/GetQuestionUseCase';\nimport { AnswerQuestionUseCase } from './usecases/AnswerQuestionUseCase';\nimport { LocalStorageService } from './services/implementations/LocalStorageService';\nimport { InMemoryQuestionRepository } from './repositories/implementations/InMemoryQuestionRepository';\nimport { AuthenticateUserUseCase } from './usecases/AuthenticateUserUseCase';\nimport { HttpUserRepository } from './repositories/implementations/HttpUserRepository';\nimport { FetchHttpService } from './services/implementations/FetchHttpService';\nimport { GetAllRecommendationsUseCase } from './usecases/GetAllRecommendationsUseCase';\nimport { HttpRecommendationRepository } from './repositories/implementations/HttpRecommendationRepository';\nimport { GetStoredAnswersUseCase } from './usecases/GetStoredAnswersUseCase';\nimport { GetUserTokenUseCase } from './usecases/GetUserTokenUseCase';\n\nconst questionStorageService = new LocalStorageService('myapp:answers');\nconst userStorageService = new LocalStorageService('myapp:user');\nconst httpService = new FetchHttpService(\"https://challenge-dot-popsure-204813.appspot.com\");\n\nconst questionRepository = new InMemoryQuestionRepository();\nconst userRepository = new HttpUserRepository(httpService);\nconst recommendationRepository = new HttpRecommendationRepository(httpService);\n\nquestions.forEach(question => questionRepository.add(question));\n\nReactDOM.render(\n<React.StrictMode>\n    <AppContext.Provider value={{\n      authenticateUserUseCase: new AuthenticateUserUseCase(userRepository, userStorageService),\n      getAllRecommendationsUseCase: new GetAllRecommendationsUseCase(recommendationRepository),\n      getQuestionUseCase: new GetQuestionUseCase(questionRepository, questionStorageService),\n      answerQuestionUseCase: new AnswerQuestionUseCase(questionRepository, questionStorageService),\n      getStoredAnswersUseCase: new GetStoredAnswersUseCase(questionStorageService),\n      getUserTokenUseCase: new GetUserTokenUseCase(userStorageService),\n    }}>\n      <App />\n    </AppContext.Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}